{"version":3,"sources":["lib/wallet_session.ts","lib/algorand.ts","App.tsx","index.tsx"],"names":["WalletSession","network","accounts","defaultAccount","connector","this","WalletConnect","bridge","qrcodeModal","WalletConnectQRCodeModal","cb","a","connected","createSession","on","error","payload","params","Promise","resolve","reconn","setInterval","clearInterval","connect","killSession","isConnected","txns","defaultAddress","getDefaultAccount","txnsToSign","map","txn","encodedTxn","Buffer","from","algosdk","encodeUnsignedTransaction","toString","encodeAddress","publicKey","signers","request","formatJsonRpcRequest","sendCustomRequest","result","element","idx","txID","blob","Uint8Array","config","host","token","port","iface","ABIInterface","ABIdef","getMethodByName","name","m","methods","find","mt","undefined","Error","client","Algodv2","asset_id","app_addr","getApplicationAddress","accountAssetInformation","do","ainfo","sendWait","stxns","sendRawTransaction","txId","waitForConfirmation","getAirdropTxns","sender","signer","makeBasicAccountTransactionSigner","getTransactionParams","sp","atc","AtomicTransactionComposer","addTransaction","makeAssetTransferTxnWithSuggestedParamsFromObject","assetIndex","to","suggestedParams","amount","addMethodCall","appID","method","methodArgs","buildGroup","tws","PromptAppNav","props","className","Classes","DIALOG_BODY","style","borderRadius","margin","text","href","isIOS","intent","large","minimal","outlined","rightIcon","App","React","useState","loading","setLoading","wallet","setConnected","remaining","setRemaining","setAssetId","audio_ref","useRef","document","getElementById","useEffect","hash","window","location","aid","parseInt","split","isNaN","countRemaining","then","cnt","links","aidx","push","alert","current","play","signTxn","signed","stxn","pause","content","elevation","Elevation","TWO","onClick","triggerDrop","hidden","id","ref","src","isOpen","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.40f6e021.chunk.js","sourcesContent":["import algosdk, { Transaction, TransactionParams } from \"algosdk\";\n\nimport WalletConnect from \"@walletconnect/client\";\nimport WalletConnectQRCodeModal from \"algorand-walletconnect-qrcode-modal\";\n\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\n\n\ninterface SignedTxn {\n    txID: string\n    blob: Uint8Array\n};\n\nexport default class WalletSession {\n  accounts: string[];\n  defaultAccount: number;\n  network: string;\n  connector: WalletConnect;\n\n  constructor(network: string) {\n    this.accounts = [];\n    this.defaultAccount = 0;\n    this.network = network;\n    this.connector = new WalletConnect({\n        bridge : \"https://bridge.walletconnect.org\",\n        qrcodeModal: WalletConnectQRCodeModal,\n    });\n  }\n\n  async connect(cb: any): Promise<boolean> {\n    // Check if connection is already established\n    if (this.connector.connected) return true;\n\n    this.connector.createSession();\n\n    this.connector.on(\"connect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n      const { accounts } = payload.params[0];\n      this.accounts = accounts;\n      cb(accounts);\n    });\n\n    this.connector.on(\"session_update\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n      const { accounts } = payload.params[0];\n      this.accounts = accounts;\n      cb(accounts);\n    });\n\n    this.connector.on(\"disconnect\", (error, payload) => {\n      if (error) throw error;\n    });\n\n\n    return new Promise(resolve=>{\n      const reconn = setInterval(() => {\n        if (this.connector.connected) {\n          clearInterval(reconn);\n          resolve(true);\n          return;\n        }\n        this.connector.connect();\n      }, 100);\n    });\n  }\n\n  isConnected(): boolean {\n    return this.connector.connected;\n  }\n\n  disconnect() {\n    this.connector.killSession();\n  }\n\n  getDefaultAccount(): string {\n    if (!this.isConnected()) return \"\";\n    return this.connector.accounts[this.defaultAccount];\n  }\n\n  async signTxn(txns: Transaction[]): Promise<SignedTxn[]> {\n    const defaultAddress = this.getDefaultAccount();\n    const txnsToSign = txns.map((txn) => {\n      const encodedTxn = Buffer.from(\n        algosdk.encodeUnsignedTransaction(txn)\n      ).toString(\"base64\");\n\n      if (algosdk.encodeAddress(txn.from.publicKey) !== defaultAddress)\n        return { txn: encodedTxn, signers: [] };\n      return { txn: encodedTxn };\n    });\n\n    const request = formatJsonRpcRequest(\"algo_signTxn\", [txnsToSign]);\n\n    const result: string[] = await this.connector.sendCustomRequest(request);\n\n    return result.map((element, idx) => {\n      return element\n        ? {\n            txID: txns[idx].txID(),\n            blob: new Uint8Array(Buffer.from(element, \"base64\")),\n          }\n        : {\n            txID: txns[idx].txID(),\n            blob: new Uint8Array(),\n          };\n    });\n  }\n\n}","import algosdk from 'algosdk'\nimport ABIdef from \"./abi.json\"\n\n\nexport const config = {\n    appId: 81677804,\n    assets: [81677963, 81677921, 81677898, 81677864, 81677845],\n    algod: {\n        network:\"TestNet\",\n        host: \"https://testnet-api.algonode.cloud\",\n        token: \"\",\n        port: \"\" \n    }\n    //algod: {\n    //    network:\"sandnet-v1\",\n    //    host: 'http://localhost',\n    //    token: \"a\".repeat(64),\n    //    port: 4001\n    //}\n}\n\n\nconst iface = new algosdk.ABIInterface({...ABIdef})\n\n// Utility function to return an ABIMethod by its name\nfunction getMethodByName(name: string): algosdk.ABIMethod  {\n    const m = iface.methods.find((mt: algosdk.ABIMethod)=>{ return mt.name===name })\n    if(m === undefined)\n        throw Error(\"Method undefined: \"+name)\n    return m\n}\n\nconst client = new algosdk.Algodv2(config.algod.token, config.algod.host, config.algod.port)\n\nexport async function countRemaining(asset_id: number): Promise<number> {\n    const app_addr = algosdk.getApplicationAddress(config.appId)\n    const ainfo = await client.accountAssetInformation(app_addr, asset_id).do()\n    return ainfo['asset-holding']['amount']\n}\n\nexport async function sendWait(stxns: Uint8Array[]): Promise<any> {\n    const {txId} = await client.sendRawTransaction(stxns).do()\n    const result = await algosdk.waitForConfirmation(client, txId, 2)\n    return result\n}\n\nexport async function getAirdropTxns(asset_id: number, sender: string): Promise<algosdk.Transaction[]> {\n    const signer = algosdk.makeBasicAccountTransactionSigner({} as algosdk.Account)\n    const sp = await client.getTransactionParams().do()\n    const atc = new algosdk.AtomicTransactionComposer()\n    atc.addTransaction({\n        txn: algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n            assetIndex: asset_id,\n            from: sender,\n            to: sender,\n            suggestedParams: sp,\n            amount: 0\n        }),\n        signer: signer\n    })\n    atc.addMethodCall({\n        appID: config.appId, \n        method: getMethodByName(\"drop\"), \n        sender: sender, \n        suggestedParams: sp,\n        methodArgs:[asset_id],\n        signer: signer \n    })\n    return atc.buildGroup().map((tws)=>{ return tws.txn})\n}","import React from 'react';\nimport { config, getAirdropTxns, sendWait, countRemaining } from './lib/algorand'\nimport WalletSession from \"./lib/wallet_session\"\nimport { AnchorButton, Dialog, Card, Button, Elevation, Classes } from \"@blueprintjs/core\"\nimport { BrowserView, MobileView, isIOS, isMobileSafari } from 'react-device-detect'\n\n\nfunction App() {\n  const [loading, setLoading] = React.useState(false)\n  const [wallet, setWallet] = React.useState(new WalletSession(config.algod.network))\n  const [connected, setConnected] = React.useState(false)\n  const [remaining, setRemaining] = React.useState(0)\n  const [asset_id, setAssetId] = React.useState<number>(0)\n  const audio_ref = React.useRef<HTMLAudioElement>(document.getElementById('hack') as HTMLAudioElement);\n\n  React.useEffect(() => {\n    setConnected(wallet.isConnected())\n  }, [wallet])\n\n\n  const hash = window.location.hash\n  React.useEffect(() => {\n    const aid = hash === \"\" ? 0 : parseInt(hash.split(\"#\")[1]);\n    if (aid === 0 || isNaN(aid)) return;\n\n    setAssetId(aid);\n    countRemaining(aid).then((cnt: number) => {\n      setRemaining(cnt)\n    })\n  }, [loading, asset_id, hash])\n\n\n\n  // If no asset id in path, just dump links\n  if (asset_id === 0 || isNaN(asset_id)) {\n    const links = []\n    for (const aidx of config.assets) {\n      links.push(<a key={aidx} href={'#' + aidx.toString()}>{aidx}</a>)\n    }\n    return (\n      <div className='container'>\n        {links}\n      </div>\n    )\n  }\n\n  async function triggerDrop(asset_id: number) {\n    if (!wallet.isConnected()) {\n      alert(\"Not connected to wallet!\")\n      return\n    }\n\n    audio_ref.current?.play()\n\n    setLoading(true)\n    const txns = await getAirdropTxns(asset_id, wallet.getDefaultAccount())\n    const signed = await wallet.signTxn(txns)\n    await sendWait(signed.map((stxn) => { return stxn.blob }))\n    setLoading(false)\n\n    audio_ref.current?.pause()\n  }\n\n\n  async function connect() {\n    audio_ref.current?.play()\n    wallet.connect(() => {\n      setConnected(true)\n      audio_ref.current?.pause()\n    })\n  }\n\n  const content = connected ? (\n    <Card elevation={Elevation.TWO}>\n      <h3>{remaining} Left</h3>\n      <Button\n        intent='success'\n        onClick={() => { triggerDrop(asset_id) }}\n        key={'asset-' + asset_id.toString()}\n        text={'Drop ' + asset_id.toString()}\n        loading={loading}\n      />\n    </Card>\n  ) : <Button onClick={connect}>Connect</Button>\n\n  return (\n    <div className=\"container\">\n      <div className='content'>\n        {content}\n      </div>\n      <audio hidden id='hack' ref={audio_ref} src='https://github.com/anars/blank-audio/blob/master/30-seconds-of-silence.mp3?raw=true' ></audio>\n      <PromptAppNav isOpen={loading} />\n    </div>\n  );\n}\n\ninterface PromptAppNavProps {\n  isOpen: boolean\n}\nfunction PromptAppNav(props: PromptAppNavProps) {\n  return (\n    <Dialog {...props} >\n      <div className={Classes.DIALOG_BODY}>\n        <div className='container'>\n          <p>Open the Pera Wallet to approve the transaction and come back</p>\n          <MobileView >\n            <AnchorButton\n              style={{ borderRadius: '8px', margin: '20px 0px -30px' }}\n              text='Take me there'\n              href={isIOS ? \"algorand-wc://wc?uri=wc:00e46b69-d0cc-4b3e-b6a2-cee442f97188@1\" : \"wc:00e46b69-d0cc-4b3e-b6a2-cee442f97188@1\"}\n              intent=\"success\"\n              large={true}\n              minimal={true}\n              outlined={true}\n              rightIcon=\"double-chevron-right\"\n            />\n          </MobileView>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nexport default App;","import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}